
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import ast.base.*;
import ast.declaration.*;
import ast.expression.*;
import ast.function.*;
import ast.statement.*;
import ast.type.*;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\003\000\002\002\004\000\002\017" +
    "\004\000\002\017\002\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\004\000\002\004\002\000" +
    "\002\005\003\000\002\005\003\000\002\006\007\000\002" +
    "\006\011\000\002\006\007\000\002\007\007\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\007\000\002\012\005\000\002\024\004\000" +
    "\002\024\002\000\002\023\003\000\002\023\003\000\002" +
    "\010\006\000\002\010\011\000\002\010\010\000\002\010" +
    "\007\000\002\010\010\000\002\010\012\000\002\010\010" +
    "\000\002\010\014\000\002\010\015\000\002\010\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\004\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\006\000\002\011\006\000\002\011\005\000\002\011\003" +
    "\000\002\016\003\000\002\016\005\000\002\013\014\000" +
    "\002\014\002\000\002\014\003\000\002\021\003\000\002" +
    "\021\005\000\002\022\002\000\002\022\003\000\002\020" +
    "\005\000\002\020\007\000\002\015\004\000\002\015\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\024\002\ufffe\004\ufffe\005\ufffe\016\ufffe\022" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\062\ufffe\001\002\000\004" +
    "\002\256\001\002\000\024\002\001\004\012\005\014\016" +
    "\013\022\007\026\006\027\024\030\021\062\017\001\002" +
    "\000\020\013\076\014\101\050\103\051\104\062\102\063" +
    "\100\064\075\001\002\000\004\062\230\001\002\000\024" +
    "\002\ufffb\004\ufffb\005\ufffb\016\ufffb\022\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\062\ufffb\001\002\000\024\002\ufffd\004\ufffd" +
    "\005\ufffd\016\ufffd\022\ufffd\026\ufffd\027\ufffd\030\ufffd\062" +
    "\ufffd\001\002\000\004\062\216\001\002\000\020\013\076" +
    "\014\101\050\103\051\104\062\102\063\100\064\075\001" +
    "\002\000\004\062\201\001\002\000\024\002\ufffc\004\ufffc" +
    "\005\ufffc\016\ufffc\022\ufffc\026\ufffc\027\ufffc\030\ufffc\062" +
    "\ufffc\001\002\000\024\002\uffff\004\uffff\005\uffff\016\uffff" +
    "\022\uffff\026\uffff\027\uffff\030\uffff\062\uffff\001\002\000" +
    "\012\036\166\051\164\053\165\056\uffc7\001\002\000\030" +
    "\002\ufff7\004\ufff7\005\ufff7\016\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\062\ufff7\001\002\000\020" +
    "\013\076\014\101\050\103\051\104\062\102\063\100\064" +
    "\075\001\002\000\004\056\072\001\002\000\030\002\ufff8" +
    "\004\ufff8\005\ufff8\016\ufff8\020\ufff8\021\ufff8\022\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\062\ufff8\001\002\000\004\062\025" +
    "\001\002\000\004\051\026\001\002\000\006\052\uffc0\062" +
    "\031\001\002\000\004\052\056\001\002\000\006\052\uffbf" +
    "\055\052\001\002\000\004\060\032\001\002\000\016\006" +
    "\034\007\040\010\036\011\041\012\033\062\037\001\002" +
    "\000\010\004\012\005\014\021\ufff9\001\002\000\012\015" +
    "\ufff2\052\ufff2\055\ufff2\061\ufff2\001\002\000\006\052\uffbe" +
    "\055\uffbe\001\002\000\012\015\ufff0\052\ufff0\055\ufff0\061" +
    "\ufff0\001\002\000\012\015\uffef\052\uffef\055\uffef\061\uffef" +
    "\001\002\000\012\015\ufff1\052\ufff1\055\ufff1\061\ufff1\001" +
    "\002\000\004\053\042\001\002\000\004\063\043\001\002" +
    "\000\004\054\044\001\002\000\016\006\034\007\040\010" +
    "\036\011\041\012\033\062\037\001\002\000\012\015\uffee" +
    "\052\uffee\055\uffee\061\uffee\001\002\000\010\004\012\005" +
    "\014\021\ufff9\001\002\000\004\021\050\001\002\000\012" +
    "\015\uffed\052\uffed\055\uffed\061\uffed\001\002\000\004\021" +
    "\ufffa\001\002\000\004\062\053\001\002\000\004\060\054" +
    "\001\002\000\016\006\034\007\040\010\036\011\041\012" +
    "\033\062\037\001\002\000\006\052\uffbd\055\uffbd\001\002" +
    "\000\006\015\uffbb\060\060\001\002\000\004\015\062\001" +
    "\002\000\016\006\034\007\040\010\036\011\041\012\033" +
    "\062\037\001\002\000\004\015\uffbc\001\002\000\022\004" +
    "\012\005\014\016\013\021\uffeb\022\007\026\006\030\021" +
    "\062\017\001\002\000\004\021\070\001\002\000\024\004" +
    "\uffea\005\uffea\016\uffea\020\uffea\021\uffea\022\uffea\026\uffea" +
    "\030\uffea\062\uffea\001\002\000\024\004\uffe9\005\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\026\uffe9\030\uffe9\062\uffe9" +
    "\001\002\000\024\004\012\005\014\016\013\020\uffeb\021" +
    "\uffeb\022\007\026\006\030\021\062\017\001\002\000\006" +
    "\020\uffec\021\uffec\001\002\000\004\061\071\001\002\000" +
    "\024\002\uffc5\004\uffc5\005\uffc5\016\uffc5\022\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\062\uffc5\001\002\000\004\062\073\001" +
    "\002\000\006\036\074\056\uffc6\001\002\000\020\013\076" +
    "\014\101\050\103\051\104\062\102\063\100\064\075\001" +
    "\002\000\054\017\uffcc\025\uffcc\031\uffcc\032\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\052\uffcc\054\uffcc" +
    "\055\uffcc\057\uffcc\061\uffcc\001\002\000\054\017\uffcf\025" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf" +
    "\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\052\uffcf\054\uffcf\055\uffcf\057\uffcf\061\uffcf" +
    "\001\002\000\040\031\116\032\112\033\125\034\121\035" +
    "\115\037\117\040\124\041\122\042\126\043\114\044\120" +
    "\045\111\046\127\047\113\061\161\001\002\000\054\017" +
    "\uffcd\025\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\052\uffcd\054\uffcd\055\uffcd\057\uffcd" +
    "\061\uffcd\001\002\000\054\017\uffce\025\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\052" +
    "\uffce\054\uffce\055\uffce\057\uffce\061\uffce\001\002\000\062" +
    "\017\uffc7\025\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\051\147\052\uffc7\053\150\054" +
    "\uffc7\055\uffc7\056\uffc7\057\uffc7\061\uffc7\001\002\000\020" +
    "\013\076\014\101\050\103\051\104\062\102\063\100\064" +
    "\075\001\002\000\020\013\076\014\101\050\103\051\104" +
    "\062\102\063\100\064\075\001\002\000\056\017\uffc8\025" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\052\uffc8\054\uffc8\055\uffc8\056\106\057\uffc8" +
    "\061\uffc8\001\002\000\004\062\107\001\002\000\056\017" +
    "\uffc6\025\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\052\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\061\uffc6\001\002\000\040\031\116\032\112\033" +
    "\125\034\121\035\115\037\117\040\124\041\122\042\126" +
    "\043\114\044\120\045\111\046\127\047\113\052\123\001" +
    "\002\000\020\013\076\014\101\050\103\051\104\062\102" +
    "\063\100\064\075\001\002\000\020\013\076\014\101\050" +
    "\103\051\104\062\102\063\100\064\075\001\002\000\020" +
    "\013\076\014\101\050\103\051\104\062\102\063\100\064" +
    "\075\001\002\000\020\013\076\014\101\050\103\051\104" +
    "\062\102\063\100\064\075\001\002\000\020\013\076\014" +
    "\101\050\103\051\104\062\102\063\100\064\075\001\002" +
    "\000\020\013\076\014\101\050\103\051\104\062\102\063" +
    "\100\064\075\001\002\000\020\013\076\014\101\050\103" +
    "\051\104\062\102\063\100\064\075\001\002\000\020\013" +
    "\076\014\101\050\103\051\104\062\102\063\100\064\075" +
    "\001\002\000\020\013\076\014\101\050\103\051\104\062" +
    "\102\063\100\064\075\001\002\000\020\013\076\014\101" +
    "\050\103\051\104\062\102\063\100\064\075\001\002\000" +
    "\054\017\uffc9\025\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\052\uffc9\054\uffc9\055\uffc9" +
    "\057\uffc9\061\uffc9\001\002\000\020\013\076\014\101\050" +
    "\103\051\104\062\102\063\100\064\075\001\002\000\020" +
    "\013\076\014\101\050\103\051\104\062\102\063\100\064" +
    "\075\001\002\000\020\013\076\014\101\050\103\051\104" +
    "\062\102\063\100\064\075\001\002\000\020\013\076\014" +
    "\101\050\103\051\104\062\102\063\100\064\075\001\002" +
    "\000\054\017\uffd2\025\uffd2\031\116\032\112\033\125\034" +
    "\121\035\115\037\117\040\124\041\122\042\126\043\114" +
    "\044\120\045\uffd2\046\uffd2\047\uffd2\052\uffd2\054\uffd2\055" +
    "\uffd2\057\uffd2\061\uffd2\001\002\000\054\017\uffd6\025\uffd6" +
    "\031\116\032\112\033\125\034\121\035\115\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\047\uffd6\052\uffd6\054\uffd6\055\uffd6\057\uffd6\061\uffd6\001" +
    "\002\000\054\017\uffdc\025\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\052\uffdc\054\uffdc" +
    "\055\uffdc\057\uffdc\061\uffdc\001\002\000\054\017\uffd8\025" +
    "\uffd8\031\116\032\112\033\125\034\121\035\115\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\uffd8\047\uffd8\052\uffd8\054\uffd8\055\uffd8\057\uffd8\061\uffd8" +
    "\001\002\000\054\017\uffd7\025\uffd7\031\116\032\112\033" +
    "\125\034\121\035\115\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\052\uffd7\054" +
    "\uffd7\055\uffd7\057\uffd7\061\uffd7\001\002\000\054\017\uffdb" +
    "\025\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\037" +
    "\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\052\uffdb\054\uffdb\055\uffdb\057\uffdb\061" +
    "\uffdb\001\002\000\054\017\uffd4\025\uffd4\031\116\032\112" +
    "\033\125\034\121\035\115\037\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\052\uffd4" +
    "\054\uffd4\055\uffd4\057\uffd4\061\uffd4\001\002\000\054\017" +
    "\uffd9\025\uffd9\031\116\032\112\033\125\034\121\035\115" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\046\uffd9\047\uffd9\052\uffd9\054\uffd9\055\uffd9\057\uffd9" +
    "\061\uffd9\001\002\000\054\017\uffde\025\uffde\031\uffde\032" +
    "\uffde\033\125\034\121\035\115\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\047\uffde\052" +
    "\uffde\054\uffde\055\uffde\057\uffde\061\uffde\001\002\000\054" +
    "\017\uffda\025\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\047\uffda\052\uffda\054\uffda\055\uffda\057" +
    "\uffda\061\uffda\001\002\000\054\017\uffd5\025\uffd5\031\116" +
    "\032\112\033\125\034\121\035\115\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5" +
    "\052\uffd5\054\uffd5\055\uffd5\057\uffd5\061\uffd5\001\002\000" +
    "\054\017\uffd1\025\uffd1\031\116\032\112\033\125\034\121" +
    "\035\115\037\117\040\124\041\122\042\126\043\114\044" +
    "\120\045\uffd1\046\uffd1\047\uffd1\052\uffd1\054\uffd1\055\uffd1" +
    "\057\uffd1\061\uffd1\001\002\000\054\017\uffdd\025\uffdd\031" +
    "\uffdd\032\uffdd\033\125\034\121\035\115\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\052\uffdd\054\uffdd\055\uffdd\057\uffdd\061\uffdd\001\002" +
    "\000\054\017\uffd3\025\uffd3\031\116\032\112\033\125\034" +
    "\121\035\115\037\117\040\124\041\122\042\126\043\114" +
    "\044\120\045\uffd3\046\uffd3\047\uffd3\052\uffd3\054\uffd3\055" +
    "\uffd3\057\uffd3\061\uffd3\001\002\000\054\017\uffd0\025\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\052\uffd0\054\uffd0\055\uffd0\057\uffd0\061\uffd0\001" +
    "\002\000\022\013\076\014\101\050\103\051\104\052\uffc4" +
    "\062\102\063\100\064\075\001\002\000\020\013\076\014" +
    "\101\050\103\051\104\062\102\063\100\064\075\001\002" +
    "\000\040\031\116\032\112\033\125\034\121\035\115\037" +
    "\117\040\124\041\122\042\126\043\114\044\120\045\111" +
    "\046\127\047\113\054\152\001\002\000\054\017\uffcb\025" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\052\uffcb\054\uffcb\055\uffcb\057\uffcb\061\uffcb" +
    "\001\002\000\004\052\160\001\002\000\042\031\116\032" +
    "\112\033\125\034\121\035\115\037\117\040\124\041\122" +
    "\042\126\043\114\044\120\045\111\046\127\047\113\052" +
    "\uffc2\055\uffc2\001\002\000\006\052\uffc3\055\156\001\002" +
    "\000\020\013\076\014\101\050\103\051\104\062\102\063" +
    "\100\064\075\001\002\000\042\031\116\032\112\033\125" +
    "\034\121\035\115\037\117\040\124\041\122\042\126\043" +
    "\114\044\120\045\111\046\127\047\113\052\uffc1\055\uffc1" +
    "\001\002\000\054\017\uffca\025\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\037\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\052\uffca\054" +
    "\uffca\055\uffca\057\uffca\061\uffca\001\002\000\030\002\uffe6" +
    "\004\uffe6\005\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\062\uffe6\001\002\000\040\031\116" +
    "\032\112\033\125\034\121\035\115\037\117\040\124\041" +
    "\122\042\126\043\114\044\120\045\111\046\127\047\113" +
    "\061\163\001\002\000\030\002\uffdf\004\uffdf\005\uffdf\016" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\062\uffdf\001\002\000\022\013\076\014\101\050\103\051" +
    "\104\052\uffc4\062\102\063\100\064\075\001\002\000\020" +
    "\013\076\014\101\050\103\051\104\062\102\063\100\064" +
    "\075\001\002\000\020\013\076\014\101\050\103\051\104" +
    "\062\102\063\100\064\075\001\002\000\040\031\116\032" +
    "\112\033\125\034\121\035\115\037\117\040\124\041\122" +
    "\042\126\043\114\044\120\045\111\046\127\047\113\061" +
    "\170\001\002\000\030\002\uffe8\004\uffe8\005\uffe8\016\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\026\uffe8\027\uffe8\030\uffe8\062" +
    "\uffe8\001\002\000\040\031\116\032\112\033\125\034\121" +
    "\035\115\037\117\040\124\041\122\042\126\043\114\044" +
    "\120\045\111\046\127\047\113\054\172\001\002\000\004" +
    "\036\173\001\002\000\020\013\076\014\101\050\103\051" +
    "\104\062\102\063\100\064\075\001\002\000\040\031\116" +
    "\032\112\033\125\034\121\035\115\037\117\040\124\041" +
    "\122\042\126\043\114\044\120\045\111\046\127\047\113" +
    "\061\175\001\002\000\030\002\uffe7\004\uffe7\005\uffe7\016" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\026\uffe7\027\uffe7\030\uffe7" +
    "\062\uffe7\001\002\000\004\052\177\001\002\000\004\061" +
    "\200\001\002\000\030\002\uffe5\004\uffe5\005\uffe5\016\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\026\uffe5\027\uffe5\030\uffe5\062" +
    "\uffe5\001\002\000\004\015\202\001\002\000\016\006\034" +
    "\007\040\010\036\011\041\012\033\062\037\001\002\000" +
    "\004\061\204\001\002\000\030\002\ufff3\004\ufff3\005\ufff3" +
    "\016\ufff3\020\ufff3\021\ufff3\022\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\062\ufff3\001\002\000\040\017\206\031\116\032\112" +
    "\033\125\034\121\035\115\037\117\040\124\041\122\042" +
    "\126\043\114\044\120\045\111\046\127\047\113\001\002" +
    "\000\024\004\012\005\014\016\013\020\uffeb\021\uffeb\022" +
    "\007\026\006\030\021\062\017\001\002\000\006\020\210" +
    "\021\211\001\002\000\022\004\012\005\014\016\013\021" +
    "\uffeb\022\007\026\006\030\021\062\017\001\002\000\004" +
    "\061\212\001\002\000\030\002\uffe4\004\uffe4\005\uffe4\016" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\062\uffe4\001\002\000\004\021\214\001\002\000\004\061" +
    "\215\001\002\000\030\002\uffe3\004\uffe3\005\uffe3\016\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\026\uffe3\027\uffe3\030\uffe3\062" +
    "\uffe3\001\002\000\006\015\220\060\217\001\002\000\016" +
    "\006\034\007\040\010\036\011\041\012\033\062\037\001" +
    "\002\000\020\013\076\014\101\050\103\051\104\062\102" +
    "\063\100\064\075\001\002\000\040\031\116\032\112\033" +
    "\125\034\121\035\115\037\117\040\124\041\122\042\126" +
    "\043\114\044\120\045\111\046\127\047\113\061\222\001" +
    "\002\000\030\002\ufff4\004\ufff4\005\ufff4\016\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\026\ufff4\027\ufff4\030\ufff4\062\ufff4\001" +
    "\002\000\006\015\225\061\224\001\002\000\030\002\ufff6" +
    "\004\ufff6\005\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\062\ufff6\001\002\000\020\013\076" +
    "\014\101\050\103\051\104\062\102\063\100\064\075\001" +
    "\002\000\040\031\116\032\112\033\125\034\121\035\115" +
    "\037\117\040\124\041\122\042\126\043\114\044\120\045" +
    "\111\046\127\047\113\061\227\001\002\000\030\002\ufff5" +
    "\004\ufff5\005\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\062\ufff5\001\002\000\004\023\231" +
    "\001\002\000\022\013\076\014\101\024\233\050\103\051" +
    "\104\062\102\063\100\064\075\001\002\000\040\031\116" +
    "\032\112\033\125\034\121\035\115\037\117\040\124\041" +
    "\122\042\126\043\114\044\120\045\111\046\127\047\113" +
    "\057\243\001\002\000\020\013\076\014\101\050\103\051" +
    "\104\062\102\063\100\064\075\001\002\000\040\031\116" +
    "\032\112\033\125\034\121\035\115\037\117\040\124\041" +
    "\122\042\126\043\114\044\120\045\111\046\127\047\113" +
    "\057\235\001\002\000\020\013\076\014\101\050\103\051" +
    "\104\062\102\063\100\064\075\001\002\000\040\025\237" +
    "\031\116\032\112\033\125\034\121\035\115\037\117\040" +
    "\124\041\122\042\126\043\114\044\120\045\111\046\127" +
    "\047\113\001\002\000\022\004\012\005\014\016\013\021" +
    "\uffeb\022\007\026\006\030\021\062\017\001\002\000\004" +
    "\021\241\001\002\000\004\061\242\001\002\000\030\002" +
    "\uffe0\004\uffe0\005\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\062\uffe0\001\002\000\020\013" +
    "\076\014\101\050\103\051\104\062\102\063\100\064\075" +
    "\001\002\000\040\025\245\031\116\032\112\033\125\034" +
    "\121\035\115\037\117\040\124\041\122\042\126\043\114" +
    "\044\120\045\111\046\127\047\113\001\002\000\022\004" +
    "\012\005\014\016\013\021\uffeb\022\007\026\006\030\021" +
    "\062\017\001\002\000\004\021\247\001\002\000\004\061" +
    "\250\001\002\000\030\002\uffe1\004\uffe1\005\uffe1\016\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\026\uffe1\027\uffe1\030\uffe1\062" +
    "\uffe1\001\002\000\040\025\252\031\116\032\112\033\125" +
    "\034\121\035\115\037\117\040\124\041\122\042\126\043" +
    "\114\044\120\045\111\046\127\047\113\001\002\000\022" +
    "\004\012\005\014\016\013\021\uffeb\022\007\026\006\030" +
    "\021\062\017\001\002\000\004\021\254\001\002\000\004" +
    "\061\255\001\002\000\030\002\uffe2\004\uffe2\005\uffe2\016" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\062\uffe2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\006\002\003\017\004\001\001\000\002\001" +
    "\001\000\020\003\015\005\010\006\022\007\017\010\014" +
    "\013\007\016\021\001\001\000\006\011\250\016\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\204\016\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\161\016\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\027\022\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\034\001\001\000\012\004\046\005\045\006\022\007" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\044" +
    "\001\001\000\002\001\001\000\012\004\050\005\045\006" +
    "\022\007\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\054\001\001\000\002\001\001\000\004\015\056" +
    "\001\001\000\002\001\001\000\004\012\060\001\001\000" +
    "\002\001\001\000\020\005\063\006\022\007\017\010\064" +
    "\016\021\023\065\024\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\063\006\022" +
    "\007\017\010\064\016\021\023\065\024\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\076\016\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\145\016\104\001\001\000\006\011\107\016\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\144\016\104\001\001" +
    "\000\006\011\143\016\104\001\001\000\006\011\142\016" +
    "\104\001\001\000\006\011\141\016\104\001\001\000\006" +
    "\011\140\016\104\001\001\000\006\011\137\016\104\001" +
    "\001\000\006\011\136\016\104\001\001\000\006\011\135" +
    "\016\104\001\001\000\006\011\134\016\104\001\001\000" +
    "\006\011\133\016\104\001\001\000\002\001\001\000\006" +
    "\011\132\016\104\001\001\000\006\011\131\016\104\001" +
    "\001\000\006\011\130\016\104\001\001\000\006\011\127" +
    "\016\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\153\014\152\016\104\021\154\001\001\000\006" +
    "\011\150\016\104\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\156\016\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\011\153\014\175\016\104\021\154\001" +
    "\001\000\006\011\170\016\104\001\001\000\006\011\166" +
    "\016\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\173\016\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\005\063\006\022\007\017" +
    "\010\064\016\021\023\065\024\206\001\001\000\002\001" +
    "\001\000\020\005\063\006\022\007\017\010\064\016\021" +
    "\023\065\024\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\222\001\001\000\006\011" +
    "\220\016\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\225\016" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\231\016\104\001\001\000\002\001" +
    "\001\000\006\011\233\016\104\001\001\000\002\001\001" +
    "\000\006\011\235\016\104\001\001\000\002\001\001\000" +
    "\020\005\063\006\022\007\017\010\064\016\021\023\065" +
    "\024\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\243\016\104\001\001\000\002" +
    "\001\001\000\020\005\063\006\022\007\017\010\064\016" +
    "\021\023\065\024\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\063\006\022\007\017\010\064\016\021\023\065\024\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= ProgramUnits 
            {
              Object RESULT =null;
		int unitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object units = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new Program((List<ProgramUnit>) units);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramUnits ::= ProgramUnits ProgramUnit 
            {
              Object RESULT =null;
		int unitsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int unitsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object units = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int unitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int unitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object unit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    ((List<ProgramUnit>) units).add((ProgramUnit) unit);
                    RESULT = units;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnits",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramUnits ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<ProgramUnit>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnits",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramUnit ::= Declaration 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnit",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramUnit ::= Statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnit",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProgramUnit ::= Function 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = function; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnit",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= Declaration DeclarationList 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    List<Declaration> decls = new ArrayList<>();
                    decls.add((Declaration) decl);
                    decls.addAll((List<Declaration>) list);
                    RESULT = decls;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DeclarationList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Declaration>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= VariableDeclaration 
            {
              Object RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object varDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = varDecl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Declaration ::= TypeDeclaration 
            {
              Object RESULT =null;
		int typeDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object typeDecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = typeDecl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableDeclaration ::= VAR IDENTIFIER COLON Type SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VariableDeclaration((String) id, (Type) type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDeclaration ::= VAR IDENTIFIER COLON Type IS Expression SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VariableDeclaration((String) id, (Type) type, (Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VariableDeclaration ::= VAR IDENTIFIER IS Expression SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VariableDeclaration((String) id, (Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeDeclaration ::= TYPE IDENTIFIER IS Type SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TypeDeclaration((String) id, (Type) type); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= INTEGER 
            {
              Object RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= BOOLEAN 
            {
              Object RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= REAL 
            {
              Object RESULT =null;
		 RESULT = new RealType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType((String) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= ARRAY LBRACKET INTEGERNUM RBRACKET Type 
            {
              Object RESULT =null;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elemTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elemTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elemType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayType((Integer) size, (Type) elemType); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= RECORD DeclarationList END 
            {
              Object RESULT =null;
		int fieldsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fields = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RecordType((List<Declaration>) fields); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BodyList ::= Body BodyList 
            {
              Object RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object item = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 List<Body> items = new ArrayList<>();
                 items.add((Body) item);
                 items.addAll((List<Body>) list);
                 RESULT = items;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BodyList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Body>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BodyList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Body ::= Declaration 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object decl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Body ::= Statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stmt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= IDENTIFIER ASSIGN Expression SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentStatement((String) id, (Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= IDENTIFIER LBRACKET Expression RBRACKET ASSIGN Expression SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentStatement((String) id, (Expression) index, (Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= NestedRecordAccess DOT IDENTIFIER ASSIGN Expression SEMICOLON 
            {
              Object RESULT =null;
		int recordFieldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int recordFieldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object recordField = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignmentStatement((NestedRecordAccess) recordField, (String) id, (Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= IDENTIFIER LPAREN ParamList RPAREN SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object paramList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallStatement((String) id, (List<Expression>) paramList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= IF Expression THEN BodyList END SEMICOLON 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object thenBody = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatement((Expression) cond, (List<Body>) thenBody); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= IF Expression THEN BodyList ELSE BodyList END SEMICOLON 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int thenBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int thenBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object thenBody = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elseBody = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IfStatement((Expression) cond, (List<Body>) thenBody, (List<Body>) elseBody); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= WHILE Expression LOOP BodyList END SEMICOLON 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WhileStatement((Expression) cond, (List<Body>) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= FOR IDENTIFIER IN Expression RANGE Expression LOOP BodyList END SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new ForStatement((String) id, (Expression) start, (Expression) end, false, (List<Body>) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= FOR IDENTIFIER IN REVERSE Expression RANGE Expression LOOP BodyList END SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = new ForStatement((String) id, (Expression) start, (Expression) end, true, (List<Body>) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= RETURN Expression SEMICOLON 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStatement((Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression PLUS Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PlusExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression MINUS Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression MUL Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MulExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression DIV Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression MOD Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ModExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression EQ Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqualExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression NE Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotEqualExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression GT Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterThanExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression LT Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThanExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= Expression GE Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GreaterEqualExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= Expression LE Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessEqualExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= Expression AND Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= Expression OR Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= Expression XOR Expression 
            {
              Object RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object right = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new XorExpression((Expression) left, (Expression) right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= NOT Expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotExpression((Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = new BooleanLiteral(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = new BooleanLiteral(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= INTEGERNUM 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteral((Integer) value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= REALNUM 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RealLiteral((Double) value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expression ::= IDENTIFIER LBRACKET Expression RBRACKET 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object index = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccessExpression((String) id, (Expression) index); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expression ::= IDENTIFIER LPAREN ParamList RPAREN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object paramList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCallExpression((String) id, (List<Expression>) paramList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expression ::= LPAREN Expression RPAREN 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ParenthesizedExpression((Expression) expr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expression ::= NestedRecordAccess 
            {
              Object RESULT =null;
		int nraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nraright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object nra = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = nra; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NestedRecordAccess ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NestedRecordAccess((String) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NestedRecordAccess",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NestedRecordAccess ::= NestedRecordAccess DOT IDENTIFIER 
            {
              Object RESULT =null;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NestedRecordAccess((NestedRecordAccess) rec, (String) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NestedRecordAccess",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Function ::= ROUTINE IDENTIFIER LPAREN FuncParamList RPAREN ReturnTypeOpt IS BodyList END SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int returnTypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int returnTyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object returnType = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Function((String) id, (List<Parameter>) params, (Type) returnType, (List<Body>) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ParamList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Parameter>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ParamList ::= CallParamList 
            {
              Object RESULT =null;
		int callListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object callList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = callList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CallParamList ::= Expression 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  List<Expression> expressions = new ArrayList<>();
                  expressions.add((Expression) expr);
                  RESULT = expressions;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParamList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CallParamList ::= CallParamList COMMA Expression 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ((List<Expression>) exprs).add((Expression) expr);
                  RESULT = exprs;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParamList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FuncParamList ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Parameter>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParamList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FuncParamList ::= DeclParamList 
            {
              Object RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object declList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FuncParamList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DeclParamList ::= IDENTIFIER COLON Type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  List<Parameter> params = new ArrayList<>();
                  params.add(new Parameter((String) id, (Type) type));
                  RESULT = params;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclParamList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DeclParamList ::= DeclParamList COMMA IDENTIFIER COLON Type 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  ((List<Parameter>) params).add(new Parameter((String) id, (Type) type));
                  RESULT = params;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclParamList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ReturnTypeOpt ::= COLON Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnTypeOpt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ReturnTypeOpt ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnTypeOpt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}

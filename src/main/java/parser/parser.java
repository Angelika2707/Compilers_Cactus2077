
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\004\000\002\004\002\000\002\005\003\000" +
    "\002\005\003\000\002\006\007\000\002\006\011\000\002" +
    "\006\007\000\002\007\007\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\007" +
    "\000\002\013\005\000\002\011\004\000\002\011\002\000" +
    "\002\010\006\000\002\010\011\000\002\010\010\000\002" +
    "\010\007\000\002\010\014\000\002\010\011\000\002\010" +
    "\015\000\002\010\016\000\002\010\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\004\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\006\000\002" +
    "\012\006\000\002\012\005\000\002\012\003\000\002\020" +
    "\003\000\002\020\005\000\002\014\015\000\002\015\002" +
    "\000\002\015\003\000\002\016\003\000\002\016\005\000" +
    "\002\016\005\000\002\016\007\000\002\017\004\000\002" +
    "\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\024\002\uffff\004\uffff\005\uffff\016\uffff\022" +
    "\uffff\026\uffff\027\uffff\030\uffff\062\uffff\001\002\000\024" +
    "\002\011\004\012\005\015\016\013\022\006\026\005\027" +
    "\023\030\021\062\017\001\002\000\020\013\031\014\034" +
    "\050\037\051\040\062\045\063\033\064\027\001\002\000" +
    "\004\062\225\001\002\000\024\002\ufffc\004\ufffc\005\ufffc" +
    "\016\ufffc\022\ufffc\026\ufffc\027\ufffc\030\ufffc\062\ufffc\001" +
    "\002\000\024\002\ufffe\004\ufffe\005\ufffe\016\ufffe\022\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\062\ufffe\001\002\000\004\002" +
    "\000\001\002\000\004\062\213\001\002\000\020\013\031" +
    "\014\034\050\037\051\040\062\045\063\033\064\027\001" +
    "\002\000\024\002\ufffd\004\ufffd\005\ufffd\016\ufffd\022\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\062\ufffd\001\002\000\004\062" +
    "\176\001\002\000\024\002\001\004\001\005\001\016\001" +
    "\022\001\026\001\027\001\030\001\062\001\001\002\000" +
    "\012\036\163\051\161\053\162\056\uffcb\001\002\000\030" +
    "\002\ufff8\004\ufff8\005\ufff8\016\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\062\ufff8\001\002\000\020" +
    "\013\031\014\034\050\037\051\040\062\045\063\033\064" +
    "\027\001\002\000\004\056\152\001\002\000\004\062\025" +
    "\001\002\000\030\002\ufff9\004\ufff9\005\ufff9\016\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\026\ufff9\027\ufff9\030\ufff9\062\ufff9" +
    "\001\002\000\004\051\026\001\002\000\022\013\031\014" +
    "\034\050\037\051\040\052\uffc8\062\036\063\033\064\027" +
    "\001\002\000\054\017\uffd0\025\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\052\uffd0\054" +
    "\uffd0\055\uffd0\057\uffd0\061\uffd0\001\002\000\004\052\137" +
    "\001\002\000\054\017\uffd3\025\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\052\uffd3\054" +
    "\uffd3\055\uffd3\057\uffd3\061\uffd3\001\002\000\042\031\056" +
    "\032\051\033\065\034\063\035\054\037\057\040\064\041" +
    "\062\042\066\043\055\044\060\045\052\046\067\047\053" +
    "\052\uffc6\055\uffc6\001\002\000\054\017\uffd1\025\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\052\uffd1\054\uffd1\055\uffd1\057\uffd1\061\uffd1\001\002" +
    "\000\054\017\uffd2\025\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\046\uffd2\047\uffd2\052\uffd2\054\uffd2\055" +
    "\uffd2\057\uffd2\061\uffd2\001\002\000\006\052\uffc7\055\132" +
    "\001\002\000\052\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\051\046\052\uffcb\053\047\055" +
    "\uffcb\056\uffcb\060\112\001\002\000\020\013\031\014\034" +
    "\050\037\051\040\062\045\063\033\064\027\001\002\000" +
    "\020\013\031\014\034\050\037\051\040\062\045\063\033" +
    "\064\027\001\002\000\056\017\uffcc\025\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\052" +
    "\uffcc\054\uffcc\055\uffcc\056\042\057\uffcc\061\uffcc\001\002" +
    "\000\004\062\043\001\002\000\056\017\uffca\025\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047" +
    "\uffca\052\uffca\054\uffca\055\uffca\056\uffca\057\uffca\061\uffca" +
    "\001\002\000\040\031\056\032\051\033\065\034\063\035" +
    "\054\037\057\040\064\041\062\042\066\043\055\044\060" +
    "\045\052\046\067\047\053\052\110\001\002\000\062\017" +
    "\uffcb\025\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\051\046\052\uffcb\053\047\054\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\061\uffcb\001\002\000\022\013" +
    "\031\014\034\050\037\051\040\052\uffc8\062\036\063\033" +
    "\064\027\001\002\000\020\013\031\014\034\050\037\051" +
    "\040\062\045\063\033\064\027\001\002\000\040\031\056" +
    "\032\051\033\065\034\063\035\054\037\057\040\064\041" +
    "\062\042\066\043\055\044\060\045\052\046\067\047\053" +
    "\054\061\001\002\000\020\013\031\014\034\050\037\051" +
    "\040\062\045\063\033\064\027\001\002\000\020\013\031" +
    "\014\034\050\037\051\040\062\045\063\033\064\027\001" +
    "\002\000\020\013\031\014\034\050\037\051\040\062\045" +
    "\063\033\064\027\001\002\000\020\013\031\014\034\050" +
    "\037\051\040\062\045\063\033\064\027\001\002\000\020" +
    "\013\031\014\034\050\037\051\040\062\045\063\033\064" +
    "\027\001\002\000\020\013\031\014\034\050\037\051\040" +
    "\062\045\063\033\064\027\001\002\000\020\013\031\014" +
    "\034\050\037\051\040\062\045\063\033\064\027\001\002" +
    "\000\020\013\031\014\034\050\037\051\040\062\045\063" +
    "\033\064\027\001\002\000\054\017\uffcf\025\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\052\uffcf\054\uffcf\055\uffcf\057\uffcf\061\uffcf\001\002\000" +
    "\020\013\031\014\034\050\037\051\040\062\045\063\033" +
    "\064\027\001\002\000\020\013\031\014\034\050\037\051" +
    "\040\062\045\063\033\064\027\001\002\000\020\013\031" +
    "\014\034\050\037\051\040\062\045\063\033\064\027\001" +
    "\002\000\020\013\031\014\034\050\037\051\040\062\045" +
    "\063\033\064\027\001\002\000\020\013\031\014\034\050" +
    "\037\051\040\062\045\063\033\064\027\001\002\000\020" +
    "\013\031\014\034\050\037\051\040\062\045\063\033\064" +
    "\027\001\002\000\054\017\uffd6\025\uffd6\031\056\032\051" +
    "\033\065\034\063\035\054\037\057\040\064\041\062\042" +
    "\066\043\055\044\060\045\uffd6\046\uffd6\047\uffd6\052\uffd6" +
    "\054\uffd6\055\uffd6\057\uffd6\061\uffd6\001\002\000\054\017" +
    "\uffda\025\uffda\031\056\032\051\033\065\034\063\035\054" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\046\uffda\047\uffda\052\uffda\054\uffda\055\uffda\057\uffda" +
    "\061\uffda\001\002\000\054\017\uffe0\025\uffe0\031\uffe0\032" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\052" +
    "\uffe0\054\uffe0\055\uffe0\057\uffe0\061\uffe0\001\002\000\054" +
    "\017\uffdc\025\uffdc\031\056\032\051\033\065\034\063\035" +
    "\054\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\052\uffdc\054\uffdc\055\uffdc\057" +
    "\uffdc\061\uffdc\001\002\000\054\017\uffdf\025\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf" +
    "\052\uffdf\054\uffdf\055\uffdf\057\uffdf\061\uffdf\001\002\000" +
    "\054\017\uffdb\025\uffdb\031\056\032\051\033\065\034\063" +
    "\035\054\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\052\uffdb\054\uffdb\055\uffdb" +
    "\057\uffdb\061\uffdb\001\002\000\054\017\uffd8\025\uffd8\031" +
    "\056\032\051\033\065\034\063\035\054\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\052\uffd8\054\uffd8\055\uffd8\057\uffd8\061\uffd8\001\002" +
    "\000\054\017\uffdd\025\uffdd\031\056\032\051\033\065\034" +
    "\063\035\054\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\046\uffdd\047\uffdd\052\uffdd\054\uffdd\055" +
    "\uffdd\057\uffdd\061\uffdd\001\002\000\054\017\uffe2\025\uffe2" +
    "\031\uffe2\032\uffe2\033\065\034\063\035\054\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\052\uffe2\054\uffe2\055\uffe2\057\uffe2\061\uffe2\001" +
    "\002\000\054\017\uffd9\025\uffd9\031\056\032\051\033\065" +
    "\034\063\035\054\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9\052\uffd9\054\uffd9" +
    "\055\uffd9\057\uffd9\061\uffd9\001\002\000\054\017\uffde\025" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde\037\uffde" +
    "\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\052\uffde\054\uffde\055\uffde\057\uffde\061\uffde" +
    "\001\002\000\054\017\uffd5\025\uffd5\031\056\032\051\033" +
    "\065\034\063\035\054\037\057\040\064\041\062\042\066" +
    "\043\055\044\060\045\uffd5\046\uffd5\047\uffd5\052\uffd5\054" +
    "\uffd5\055\uffd5\057\uffd5\061\uffd5\001\002\000\054\017\uffd7" +
    "\025\uffd7\031\056\032\051\033\065\034\063\035\054\037" +
    "\057\040\064\041\062\042\066\043\055\044\060\045\uffd7" +
    "\046\uffd7\047\uffd7\052\uffd7\054\uffd7\055\uffd7\057\uffd7\061" +
    "\uffd7\001\002\000\054\017\uffe1\025\uffe1\031\uffe1\032\uffe1" +
    "\033\065\034\063\035\054\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\052\uffe1" +
    "\054\uffe1\055\uffe1\057\uffe1\061\uffe1\001\002\000\004\052" +
    "\107\001\002\000\054\017\uffce\025\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\052\uffce" +
    "\054\uffce\055\uffce\057\uffce\061\uffce\001\002\000\054\017" +
    "\uffcd\025\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\052\uffcd\054\uffcd\055\uffcd\057\uffcd" +
    "\061\uffcd\001\002\000\054\017\uffd4\025\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\052" +
    "\uffd4\054\uffd4\055\uffd4\057\uffd4\061\uffd4\001\002\000\016" +
    "\006\113\007\120\010\116\011\121\012\114\062\117\001" +
    "\002\000\012\015\ufff3\052\ufff3\055\ufff3\061\ufff3\001\002" +
    "\000\010\004\012\005\015\021\ufffa\001\002\000\006\052" +
    "\uffc4\055\uffc4\001\002\000\012\015\ufff1\052\ufff1\055\ufff1" +
    "\061\ufff1\001\002\000\012\015\ufff0\052\ufff0\055\ufff0\061" +
    "\ufff0\001\002\000\012\015\ufff2\052\ufff2\055\ufff2\061\ufff2" +
    "\001\002\000\004\053\122\001\002\000\004\063\123\001" +
    "\002\000\004\054\124\001\002\000\016\006\113\007\120" +
    "\010\116\011\121\012\114\062\117\001\002\000\012\015" +
    "\uffef\052\uffef\055\uffef\061\uffef\001\002\000\024\004\012" +
    "\005\015\016\ufffa\020\ufffa\021\ufffa\022\ufffa\026\ufffa\030" +
    "\ufffa\062\ufffa\001\002\000\004\021\130\001\002\000\012" +
    "\015\uffee\052\uffee\055\uffee\061\uffee\001\002\000\020\016" +
    "\ufffb\020\ufffb\021\ufffb\022\ufffb\026\ufffb\030\ufffb\062\ufffb" +
    "\001\002\000\020\013\031\014\034\050\037\051\040\062" +
    "\134\063\033\064\027\001\002\000\042\031\056\032\051" +
    "\033\065\034\063\035\054\037\057\040\064\041\062\042" +
    "\066\043\055\044\060\045\052\046\067\047\053\052\uffc5" +
    "\055\uffc5\001\002\000\052\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\051\046\052\uffcb\053" +
    "\047\055\uffcb\056\uffcb\060\135\001\002\000\016\006\113" +
    "\007\120\010\116\011\121\012\114\062\117\001\002\000" +
    "\006\052\uffc3\055\uffc3\001\002\000\006\015\uffc1\060\141" +
    "\001\002\000\004\015\143\001\002\000\016\006\113\007" +
    "\120\010\116\011\121\012\114\062\117\001\002\000\004" +
    "\015\uffc2\001\002\000\022\004\012\005\015\016\ufffa\021" +
    "\ufffa\022\ufffa\026\ufffa\030\ufffa\062\ufffa\001\002\000\016" +
    "\016\013\021\uffec\022\006\026\005\030\021\062\017\001" +
    "\002\000\020\016\013\020\uffec\021\uffec\022\006\026\005" +
    "\030\021\062\017\001\002\000\004\021\147\001\002\000" +
    "\004\061\150\001\002\000\024\002\uffc9\004\uffc9\005\uffc9" +
    "\016\uffc9\022\uffc9\026\uffc9\027\uffc9\030\uffc9\062\uffc9\001" +
    "\002\000\006\020\uffed\021\uffed\001\002\000\004\062\153" +
    "\001\002\000\006\036\154\056\uffca\001\002\000\020\013" +
    "\031\014\034\050\037\051\040\062\045\063\033\064\027" +
    "\001\002\000\040\031\056\032\051\033\065\034\063\035" +
    "\054\037\057\040\064\041\062\042\066\043\055\044\060" +
    "\045\052\046\067\047\053\061\156\001\002\000\030\002" +
    "\uffe9\004\uffe9\005\uffe9\016\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\062\uffe9\001\002\000\040\031" +
    "\056\032\051\033\065\034\063\035\054\037\057\040\064" +
    "\041\062\042\066\043\055\044\060\045\052\046\067\047" +
    "\053\061\160\001\002\000\030\002\uffe3\004\uffe3\005\uffe3" +
    "\016\uffe3\020\uffe3\021\uffe3\022\uffe3\026\uffe3\027\uffe3\030" +
    "\uffe3\062\uffe3\001\002\000\022\013\031\014\034\050\037" +
    "\051\040\052\uffc8\062\036\063\033\064\027\001\002\000" +
    "\020\013\031\014\034\050\037\051\040\062\045\063\033" +
    "\064\027\001\002\000\020\013\031\014\034\050\037\051" +
    "\040\062\045\063\033\064\027\001\002\000\040\031\056" +
    "\032\051\033\065\034\063\035\054\037\057\040\064\041" +
    "\062\042\066\043\055\044\060\045\052\046\067\047\053" +
    "\061\165\001\002\000\030\002\uffeb\004\uffeb\005\uffeb\016" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\062\uffeb\001\002\000\040\031\056\032\051\033\065\034" +
    "\063\035\054\037\057\040\064\041\062\042\066\043\055" +
    "\044\060\045\052\046\067\047\053\054\167\001\002\000" +
    "\004\036\170\001\002\000\020\013\031\014\034\050\037" +
    "\051\040\062\045\063\033\064\027\001\002\000\040\031" +
    "\056\032\051\033\065\034\063\035\054\037\057\040\064" +
    "\041\062\042\066\043\055\044\060\045\052\046\067\047" +
    "\053\061\172\001\002\000\030\002\uffea\004\uffea\005\uffea" +
    "\016\uffea\020\uffea\021\uffea\022\uffea\026\uffea\027\uffea\030" +
    "\uffea\062\uffea\001\002\000\004\052\174\001\002\000\004" +
    "\061\175\001\002\000\030\002\uffe8\004\uffe8\005\uffe8\016" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\062\uffe8\001\002\000\004\015\177\001\002\000\016\006" +
    "\113\007\120\010\116\011\121\012\114\062\117\001\002" +
    "\000\004\061\201\001\002\000\030\002\ufff4\004\ufff4\005" +
    "\ufff4\016\ufff4\020\ufff4\021\ufff4\022\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\062\ufff4\001\002\000\040\017\203\031\056\032" +
    "\051\033\065\034\063\035\054\037\057\040\064\041\062" +
    "\042\066\043\055\044\060\045\052\046\067\047\053\001" +
    "\002\000\022\004\012\005\015\016\ufffa\020\ufffa\022\ufffa" +
    "\026\ufffa\030\ufffa\062\ufffa\001\002\000\016\016\013\020" +
    "\uffec\022\006\026\005\030\021\062\017\001\002\000\004" +
    "\020\206\001\002\000\022\004\012\005\015\016\ufffa\021" +
    "\ufffa\022\ufffa\026\ufffa\030\ufffa\062\ufffa\001\002\000\016" +
    "\016\013\021\uffec\022\006\026\005\030\021\062\017\001" +
    "\002\000\004\021\211\001\002\000\004\061\212\001\002" +
    "\000\030\002\uffe7\004\uffe7\005\uffe7\016\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\026\uffe7\027\uffe7\030\uffe7\062\uffe7\001\002" +
    "\000\006\015\215\060\214\001\002\000\016\006\113\007" +
    "\120\010\116\011\121\012\114\062\117\001\002\000\020" +
    "\013\031\014\034\050\037\051\040\062\045\063\033\064" +
    "\027\001\002\000\040\031\056\032\051\033\065\034\063" +
    "\035\054\037\057\040\064\041\062\042\066\043\055\044" +
    "\060\045\052\046\067\047\053\061\217\001\002\000\030" +
    "\002\ufff5\004\ufff5\005\ufff5\016\ufff5\020\ufff5\021\ufff5\022" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\062\ufff5\001\002\000\006" +
    "\015\222\061\221\001\002\000\030\002\ufff7\004\ufff7\005" +
    "\ufff7\016\ufff7\020\ufff7\021\ufff7\022\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\062\ufff7\001\002\000\020\013\031\014\034\050" +
    "\037\051\040\062\045\063\033\064\027\001\002\000\040" +
    "\031\056\032\051\033\065\034\063\035\054\037\057\040" +
    "\064\041\062\042\066\043\055\044\060\045\052\046\067" +
    "\047\053\061\224\001\002\000\030\002\ufff6\004\ufff6\005" +
    "\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\062\ufff6\001\002\000\004\023\226\001\002\000" +
    "\022\013\031\014\034\024\230\050\037\051\040\062\045" +
    "\063\033\064\027\001\002\000\040\031\056\032\051\033" +
    "\065\034\063\035\054\037\057\040\064\041\062\042\066" +
    "\043\055\044\060\045\052\046\067\047\053\057\241\001" +
    "\002\000\020\013\031\014\034\050\037\051\040\062\045" +
    "\063\033\064\027\001\002\000\040\031\056\032\051\033" +
    "\065\034\063\035\054\037\057\040\064\041\062\042\066" +
    "\043\055\044\060\045\052\046\067\047\053\057\232\001" +
    "\002\000\020\013\031\014\034\050\037\051\040\062\045" +
    "\063\033\064\027\001\002\000\040\025\234\031\056\032" +
    "\051\033\065\034\063\035\054\037\057\040\064\041\062" +
    "\042\066\043\055\044\060\045\052\046\067\047\053\001" +
    "\002\000\022\004\012\005\015\016\ufffa\021\ufffa\022\ufffa" +
    "\026\ufffa\030\ufffa\062\ufffa\001\002\000\016\016\013\021" +
    "\uffec\022\006\026\005\030\021\062\017\001\002\000\004" +
    "\021\237\001\002\000\004\061\240\001\002\000\030\002" +
    "\uffe4\004\uffe4\005\uffe4\016\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\062\uffe4\001\002\000\020\013" +
    "\031\014\034\050\037\051\040\062\045\063\033\064\027" +
    "\001\002\000\040\025\243\031\056\032\051\033\065\034" +
    "\063\035\054\037\057\040\064\041\062\042\066\043\055" +
    "\044\060\045\052\046\067\047\053\001\002\000\022\004" +
    "\012\005\015\016\ufffa\021\ufffa\022\ufffa\026\ufffa\030\ufffa" +
    "\062\ufffa\001\002\000\016\016\013\021\uffec\022\006\026" +
    "\005\030\021\062\017\001\002\000\004\021\246\001\002" +
    "\000\004\061\247\001\002\000\030\002\uffe5\004\uffe5\005" +
    "\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\062\uffe5\001\002\000\040\025\251\031\056\032" +
    "\051\033\065\034\063\035\054\037\057\040\064\041\062" +
    "\042\066\043\055\044\060\045\052\046\067\047\053\001" +
    "\002\000\022\004\012\005\015\016\ufffa\021\ufffa\022\ufffa" +
    "\026\ufffa\030\ufffa\062\ufffa\001\002\000\016\016\013\021" +
    "\uffec\022\006\026\005\030\021\062\017\001\002\000\004" +
    "\021\254\001\002\000\004\061\255\001\002\000\030\002" +
    "\uffe6\004\uffe6\005\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\062\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\004\002\003\001\001\000\020\003\015\005" +
    "\007\006\023\007\017\010\013\014\006\020\021\001\001" +
    "\000\006\012\247\020\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\201\020\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\156\020\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\031\015\027\016\034\020\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\110\020\040" +
    "\001\001\000\006\012\043\020\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\031\015\105\016\034\020" +
    "\040\001\001\000\006\012\047\020\040\001\001\000\002" +
    "\001\001\000\006\012\104\020\040\001\001\000\006\012" +
    "\103\020\040\001\001\000\006\012\102\020\040\001\001" +
    "\000\006\012\101\020\040\001\001\000\006\012\100\020" +
    "\040\001\001\000\006\012\077\020\040\001\001\000\006" +
    "\012\076\020\040\001\001\000\006\012\075\020\040\001" +
    "\001\000\002\001\001\000\006\012\074\020\040\001\001" +
    "\000\006\012\073\020\040\001\001\000\006\012\072\020" +
    "\040\001\001\000\006\012\071\020\040\001\001\000\006" +
    "\012\070\020\040\001\001\000\006\012\067\020\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\114\001" +
    "\001\000\002\001\001\000\012\004\126\005\125\006\023" +
    "\007\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\124\001\001\000" +
    "\002\001\001\000\012\004\130\005\125\006\023\007\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\132\020\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\135\001\001\000\002\001" +
    "\001\000\004\017\137\001\001\000\002\001\001\000\004" +
    "\013\141\001\001\000\002\001\001\000\012\004\143\005" +
    "\125\006\023\007\017\001\001\000\010\010\144\011\145" +
    "\020\021\001\001\000\010\010\144\011\150\020\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\154\020\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\031\015\172\016\034\020\040\001\001\000\006\012\165" +
    "\020\040\001\001\000\006\012\163\020\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\170\020\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\203\005\125\006\023\007\017\001\001\000" +
    "\010\010\144\011\204\020\021\001\001\000\002\001\001" +
    "\000\012\004\206\005\125\006\023\007\017\001\001\000" +
    "\010\010\144\011\207\020\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\217\001\001\000\006\012\215\020\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\222\020\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\226\020\040\001\001\000\002\001\001\000\006\012\230" +
    "\020\040\001\001\000\002\001\001\000\006\012\232\020" +
    "\040\001\001\000\002\001\001\000\012\004\234\005\125" +
    "\006\023\007\017\001\001\000\010\010\144\011\235\020" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\241\020\040\001\001\000\002\001" +
    "\001\000\012\004\243\005\125\006\023\007\017\001\001" +
    "\000\010\010\144\011\244\020\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\251\005\125\006\023\007\017\001\001\000" +
    "\010\010\144\011\252\020\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program ProgramUnit 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramUnit ::= Declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnit",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProgramUnit ::= Statement 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnit",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProgramUnit ::= Function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProgramUnit",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DeclarationList ::= Declaration DeclarationList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DeclarationList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclarationList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Declaration ::= VariableDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Declaration ::= TypeDeclaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VariableDeclaration ::= VAR IDENTIFIER COLON Type SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Variable declaration with type only: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableDeclaration ::= VAR IDENTIFIER COLON Type IS Expression SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 System.out.println("Variable declaration with type spec. and type: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDeclaration ::= VAR IDENTIFIER IS Expression SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Variable declaration without type spec. and type: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeDeclaration ::= TYPE IDENTIFIER IS Type SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 System.out.println("Type declaration: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= ARRAY LBRACKET INTEGERNUM RBRACKET Type 
            {
              Object RESULT =null;
		 System.out.println("Array type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= RECORD DeclarationList END 
            {
              Object RESULT =null;
		 System.out.println("Record type"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StatementList ::= Statement StatementList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatementList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= IDENTIFIER ASSIGN Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= IDENTIFIER LBRACKET Expression RBRACKET ASSIGN Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= NestedRecordAccess DOT IDENTIFIER ASSIGN Expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= IDENTIFIER LPAREN ParamList RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= IF Expression THEN DeclarationList StatementList ELSE DeclarationList StatementList END SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("If-else statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= WHILE Expression LOOP DeclarationList StatementList END SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("While loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= FOR IDENTIFIER IN Expression RANGE Expression LOOP DeclarationList StatementList END SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("For loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= FOR IDENTIFIER IN REVERSE Expression RANGE Expression LOOP DeclarationList StatementList END SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("For loop reverse"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= RETURN Expression SEMICOLON 
            {
              Object RESULT =null;
		 System.out.println("Return statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expression ::= Expression PLUS Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression MINUS Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression MUL Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression DIV Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression MOD Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression EQ Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression NE Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression GT Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression LT Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Expression GE Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Expression LE Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Expression AND Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression OR Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= Expression XOR Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= NOT Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= INTEGERNUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= REALNUM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= IDENTIFIER LBRACKET Expression RBRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= IDENTIFIER LPAREN ParamList RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expression ::= LPAREN Expression RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expression ::= NestedRecordAccess 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NestedRecordAccess ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NestedRecordAccess",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NestedRecordAccess ::= NestedRecordAccess DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NestedRecordAccess",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Function ::= ROUTINE IDENTIFIER LPAREN ParamList RPAREN ReturnTypeOpt IS DeclarationList StatementList END SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		 System.out.println("Function definition: " + id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Function",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ParamList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ParamList ::= ParamListNonEmpty 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ParamListNonEmpty ::= Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamListNonEmpty",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ParamListNonEmpty ::= ParamListNonEmpty COMMA Expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamListNonEmpty",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ParamListNonEmpty ::= IDENTIFIER COLON Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamListNonEmpty",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ParamListNonEmpty ::= ParamListNonEmpty COMMA IDENTIFIER COLON Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamListNonEmpty",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ReturnTypeOpt ::= COLON Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnTypeOpt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ReturnTypeOpt ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnTypeOpt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
